extends c

##
## Preprocessor
# #include <...>
snippet incc
	#include <${1:iostream}>
snippet binc
	#include <boost/${1:shared_ptr}.hpp>
##
## STL Collections
# std::array
snippet array
	std::array< ${1:T}, ${2:N} > ${3};
# std::vector
snippet vector
	std::vector< ${1:T} > ${2};
# std::deque
snippet deque
	std::deque< ${1:T} > ${2};
# std::forward_list
snippet flist
	std::forward_list< ${1:T} > ${2};
# std::list
snippet list
	std::list< ${1:T} > ${2};
# std::set
snippet set
	std::set< ${1:T} > ${2};
# std::map
snippet map
	std::map< ${1:Key}, ${2:T} > ${3};
# std::multiset
snippet mset
	std::multiset< ${1:T} > ${2};
# std::multimap
snippet mmap
	std::multimap< ${1:Key}, ${2:T} > ${3};
# std::unordered_set
snippet uset
	std::unordered_set< ${1:T} > ${2};
# std::unordered_map
snippet umap
	std::unordered_map< ${1:Key}, ${2:T} > ${3};
# std::unordered_multiset
snippet umset
	std::unordered_multiset< ${1:T} > ${2};
# std::unordered_multimap
snippet ummap
	std::unordered_multimap< ${1:Key}, ${2:T} > ${3};
# std::stack
snippet stack
	std::stack< ${1:T} > ${2};
# std::queue
snippet queue
	std::queue< ${1:T} > ${2};
# std::priority_queue
snippet pqueue
	std::priority_queue< ${1:T} > ${2};
##
## Class
# class
snippet cl
	class ${1:`vim_snippets#Filename('$1', 'name')`}
	{
	public:
		$1( ${2} );
		~$1( );

	private:
		${0:/* data */}
	};
# member function implementation
snippet mfun
	${4:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) 
	{
		${0}
	}
# namespace
snippet ns
	namespace ${1:`vim_snippets#Filename('', 'my')`}
	{
		${0}
	} /* namespace $1 */
##
## Input/Output
# std::cout
snippet cout
	std::cout << ${1} << std::endl;
# std::cin
snippet cin
	std::cin >> ${1};
##
## Casts
# static
snippet sca
	static_cast< ${1:unsigned} >(${2:expr})${3}
# dynamic
snippet dca
	dynamic_cast< ${1:unsigned} >(${2:expr})${3}
# reinterpret
snippet rca
	reinterpret_cast< ${1:unsigned} >(${2:expr})${3}
# const
snippet cca
	const_cast< ${1:unsigned} >(${2:expr})${3}
##
## Lambdas
# lamda (one line)
snippet ld
	[${1}](${2}){${3}};
# lambda (multi-line)
snippet lld
	[${1}](${2})
	{
		${3}
	};
